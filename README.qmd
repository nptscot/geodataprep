---
format: gfm
execute: 
  cache: true
---

# Simplified road network data: open_roads_scotland.geojson
```{r}
data_dir = "../npt/inputdata/"
simplified_roads = sf::st_read(file.path(data_dir, "open_roads_scotland.geojson")) |>
  sf::st_transform(crs = 27700)
```

# Scotland region and local authority boundaries
```{r}
lads = sf::st_read(file.path(data_dir, "boundaries/la_regions_scotland_bfe_simplified_2023.geojson")) |>
  sf::st_transform(crs = 27700)
# [1] "LAD23CD"  "LAD23NM"  "Region"   "geometry"
```

lads$Region
[1] "Tayside, Central and Fife" "Scotland South"
[3] "Glasgow and Strathclyde"   "Edinburgh and Lothians"
[5] "Highlands and Islands"     "Aberdeen and North East"

lads$LAD23NM
 [1] "Clackmannanshire"      "Dumfries and Galloway" "East Ayrshire"        
 [4] "East Lothian"          "East Renfrewshire"     "Na h-Eileanan Siar"
 [7] "Falkirk"               "Highland"              "Inverclyde"
[10] "Midlothian"            "Moray"                 "North Ayrshire"
[13] "Orkney Islands"        "Scottish Borders"      "Shetland Islands"
[16] "South Ayrshire"        "South Lanarkshire"     "Stirling"
[19] "Aberdeen City"         "Aberdeenshire"         "Argyll and Bute"
[22] "City of Edinburgh"     "Renfrewshire"          "West Dunbartonshire"
[25] "West Lothian"          "Angus"                 "Dundee City"
[28] "East Dunbartonshire"   "Fife"                  "Perth and Kinross"
[31] "Glasgow City"          "North Lanarkshire"

# MasterMap data can be downloaded from https://digimap.edina.ac.uk/
Ordnance Survey Tab -> OS Digimap -> log in with organisation -> Download Data -> OS MasterMap -> Select layers (e.g. Topography or Highways Road)

The folloing code can be used to read the data as save as Rds file.
```{r}
#| eval: false
#remotes::install_github("acteng/mastermapr")
# directory = "data/MasterMap Highways Network_roads_5779840"
# system.time({
#   mm_data = mastermapr::mm_read(directory, pattern = "RoadLink", n_files = Inf) 
# })
saveRDS(mm_data, "data/mm_data_RoadLink.Rds")
mm_data_2d = sf::st_zm(mm_data)
list_cols = sapply(mm_data_2d, is.list)
mm_data_list = mm_data_2d[, !list_cols]
mm_data_scot = mm_data_list[st_union(lads), , op = st_intersects]
# sf::st_write(mm_data_scot, "data/mm_data_RoadLink_Scotland.gpkg")
# system("gh release create v1")
# system("gh release upload v1 data/mm_data_RoadLink_Scotland.gpkg")
```

```{r}
mm_data_scot = sf::read_sf("data/mm_data_RoadLink_Scotland.gpkg")
```

The MasterMap Roadlink data contains the following columns:

[1] "gml_id" [2] "identifier" [3] "beginLifespanVersion" [4] "localId" [5] "namespace" [6] "fictitious" [7] "validFrom" [8] "reasonForChange" [9] "roadClassification" [10] "routeHierarchy" [11] "formOfWay" [12] "trunkRoad" [13] "primaryRoute" [14] "operationalState" [15] "provenance" [16] "length" [17] "length_uom" [18] "matchStatus" [19] "startGradeSeparation" [20] "endGradeSeparation" [21] "averageWidth" [22] "averageWidth_uom" [23] "minimumWidth" [24] "minimumWidth_uom" [25] "confidenceLevel" [26] "inDirection" [27] "inDirection_uom" [28] "inOppositeDirection" [29] "inOppositeDirection_uom" [30] "cycleFacility" [31] "wholeLink" [32] "roadStructure" [33] "roadName" [34] "alternateIdentifier|ThematicIdentifier|identifier" [35] "identifierScheme" [36] "alternateName" [37] "roadClassificationNumber" [38] "centrelineGeometry"

# OSM data can be downloaded using osmactive package

```{r}
library(osmactive)
osm_national = get_travel_network("Scotland")
osm_national = osm_national |> sf::st_transform(crs = 27700)
```

The OSM data contains the following columns:

 [1] "osm_id"                "name"                  "highway"
 [4] "man_made"              "maxspeed"              "oneway"
 [7] "bicycle"               "cycleway"              "cycleway_left"
[10] "cycleway_right"        "cycleway_both"         "lanes"
[13] "lanes_both_ways"       "lanes_forward"         "lanes_backward"
[16] "lanes_bus"             "lanes_bus_conditional" "width"
[19] "segregated"            "sidewalk"              "footway"
[22] "service"               "surface"               "tracktype"
[25] "smoothness"            "access"                "z_order"
[28] "other_tags"            "geometry"


# Example of Edinburgh
```{r}
library(zonebuilder)
library(mapview)
zone = zonebuilder::zb_zone("Edinburgh", n_circles = 1) |> sf::st_transform(crs = 27700)
mm_data_zone = mm_data_scot[sf::st_union(zone), , op = sf::st_intersects]
osm_data_zone = osm_national[sf::st_union(zone), , op = sf::st_intersects]
simplified_roads_zone = simplified_roads[sf::st_union(zone), , op = sf::st_intersects]

mm_data_zone_2d = sf::st_zm(mm_data_zone)
list_cols = sapply(mm_data_zone_2d, is.list)
mm_data_zone_clean = mm_data_zone_2d[, !list_cols]

mapview(simplified_roads_zone, color = "blue")  + mapview(osm_data_zone, color = "green") + mapview(mm_data_zone_clean, color = "red")
```


# Join averageWidth from MasterMap RoadLink data to simplified road network data

```{r}
library(stplanr)
library(ggplot2)

rnet_joined = stplanr::rnet_merge(simplified_roads_zone, mm_data_zone_clean, max_angle_diff = 15, dist = 15, funs = list(averageWidth  = sum))
buffer = sf::st_buffer(rnet_joined, 20)
summary(mm_data_zone_clean$averageWidth)
summary(rnet_joined$averageWidth)
mapview(rnet_joined) + mapview(mm_data_zone_clean, color = "red") 

mm_data_zone_clean_f = mm_data_zone_clean |> dplyr::filter(gml_id%in% c("osgb4000000006400630", "osgb4000000006400630", "osgb4000000006400631", "osgb4000000006400631","osgb5000005304693961", "osgb4000000006400658"))
simplified_roads_zone_f = simplified_roads_zone |> dplyr::filter(id %in% c("A1E134C9-85D1-4A94-A4B6-F08E8A863B17"))
mapview(mm_data_zone_clean_f) + mapview(simplified_roads_zone_f)
```

```{r}
#| label: rnetmatch
#| eval: false
if (!dir.exists("rnetmatch")) {
  system("gh repo clone nptscot/rnetmatch")
}
# wd = setwd("rnetmatch/r")
# getwd()
# devtools::build()
# # devtools::install() # fails
# devtools::load_all()
# setwd(wd)
devtools::load_all("rnetmatch/r")

matched_df = rnet_match(simplified_roads_zone, mm_data_zone_clean, dist_tolerance = 20, angle_tolerance = 10, trees = "xy")

sf::st_write(mm_data_zone_clean_f, "two_lines.geojson")
sf::st_write(simplified_roads_zone_f, "one_line.geojson")
readr::write_csv(matched_df, "matched_df.csv")
```

```{r}
matched_df = readr::read_csv("matched_df.csv")
matched_df |>
  head() |>
  knitr::kable()
```

# length weighted average width - using simple example

```{r}
rnet_x = sf::read_sf("data/one_line.geojson")
rnet_y = sf::read_sf("data/two_lines.geojson")

rnet_x$angle_x = stplanr::line_bearing(rnet_x, bidirectional = TRUE)
rnet_y$angle_y = stplanr::line_bearing(rnet_y, bidirectional = TRUE)
rnet_y = stplanr::line_segment(rnet_y, segment_length = 10)

angle_diff = abs(rnet_y$angle_y - rnet_x$angle_x)

max_angle_diff = 30
rnet_y_filtered = rnet_y |>
  filter(angle_diff <= max_angle_diff)

mapview::mapview(rnet_y, color = "red") + mapview::mapview(rnet_y_filtered, color = "blue")

rnet_y_filtered = rnet_y_filtered |>
  mutate(
    length_m = as.numeric(st_length(geometry)),          
    length_times_width = length_m * averageWidth        
  )

total_length_times_width = sum(rnet_y_filtered$length_times_width, na.rm = TRUE)

# Calculate total_length_x as the sum of lengths of all rnet_x_segments
total_length_x = sum(as.numeric(st_length(rnet_x)), na.rm = TRUE)

# Calculate totalAverageWidth
totalAverageWidth = total_length_times_width / total_length_x
```


```{r}
library(sf)
library(stplanr)
library(dplyr)
library(mapview)
library(purrr)

# Read the GeoJSON files
# rnet_x = sf::read_sf("data/one_line.geojson") 
# rnet_y = sf::read_sf("data/two_lines.geojson")
system.time({

rnet_x = sf::read_sf("data/simplified_network.geojson") |> sf::st_transform(27700)
rnet_y = sf::read_sf("data/mm_data_RoadLink_Scotland.gpkg") |> sf::st_transform(27700)
rnet_y$geometry = rnet_y$geom
zone = zonebuilder::zb_zone("Edinburgh", n_circles = 1) |> sf::st_transform(crs = 27700)
rnet_x = rnet_x[sf::st_union(zone), , op = sf::st_intersects]
rnet_y = rnet_y[sf::st_union(zone), , op = sf::st_intersects]
# Ensure both layers use the same CRS
# Replace 27700 with your desired CRS if different
rnet_x = st_transform(rnet_x, crs = 27700)
rnet_y = st_transform(rnet_y, crs = 27700)

line_cast = function(x) {
  sf::st_cast(sf::st_cast(x, "MULTILINESTRING"), "LINESTRING")
}
rnet_x = line_cast(rnet_x)
# Segment rnet_x into segments of 10 meters each
rnet_x_segments = stplanr::line_segment(rnet_x, segment_length = 10)

# Define constants
buffer_distance = 20  # Buffer distance in meters
max_angle_diff = 30   # Maximum angle difference in degrees
crs_proj = 27700       # Coordinate Reference System

# Loop through each segment in rnet_x_segments
for (i in 1:nrow(rnet_x_segments)) {
  print(i)
  # Extract the current segment
  current_segment = rnet_x_segments[i, ]
  
  # Create a buffer around the current segment
  current_buffer = stplanr::geo_buffer(
    current_segment, 
    dist = buffer_distance, 
    nQuadSegs = 2, 
    endCapStyle = "FLAT", 
    crs = crs_proj
  )
  
  # Clip rnet_y by the current buffer
  rnet_y_clip = st_intersection(current_buffer, rnet_y)

  # Skip to next iteration if there is no intersection
  if (nrow(rnet_y_clip) == 0) {
    next
  }
  
  # Calculate angles
  current_segment$angle_x = stplanr::line_bearing(current_segment, bidirectional = TRUE)
  rnet_y_clip$angle_y = stplanr::line_bearing(rnet_y_clip, bidirectional = TRUE)
  
  # Calculate absolute angle differences
  angle_diff = abs(rnet_y_clip$angle_y - current_segment$angle_x)
  
  # Adjust angle differences to be within 0-180 degrees
  angle_diff = ifelse(angle_diff > 180, 360 - angle_diff, angle_diff)
  
  # Filter rnet_y_clip based on angle difference
  rnet_y_clip_filtered = rnet_y_clip |>
    mutate(angle_diff = angle_diff) |>
    filter(angle_diff <= max_angle_diff)

  # Skip if no segments pass the filter
  if (nrow(rnet_y_clip_filtered) == 0) {
    next
  }

  # Calculate length of each clipped y segment
  rnet_y_clip_filtered = rnet_y_clip_filtered |>
    mutate(length_m = as.numeric(st_length(geometry)),
    length_times_width = length_m * averageWidth)
  
  # Compute total length of y segments within the buffer
  total_length_y = sum(rnet_y_clip_filtered$length_times_width, na.rm = TRUE)
  
  # Calculate length of the current x segment
  length_x = as.numeric(st_length(current_segment), na.rm = TRUE)
  
  # Avoid division by zero
  if (length_x > 0) {
    segment_width = total_length_y / length_x
  } else {
    segment_width = NA_real_
    warning(paste("Segment", i, "has zero length. averageWidth set to NA."))
  }
  
  # Assign the calculated averageWidth to the segment
  rnet_x_segments$road_width[i] = segment_width
}

})

mapview(rnet_x_segments, zcol = "road_width") + mapview(rnet_y)

```

```{r}
library(sf)
library(stplanr)
library(dplyr)
library(mapview)
library(purrr)
library(zonebuilder)

# Read and transform data
rnet_x = sf::read_sf("data/simplified_network.geojson") |> 
  sf::st_transform(27700)
rnet_y = sf::read_sf("data/mm_data_RoadLink_Scotland.gpkg") |> 
  sf::st_transform(27700)

# Correct geometry if necessary
rnet_y$geometry = rnet_y$geom

# Define the zone
zone = zonebuilder::zb_zone("Edinburgh", n_circles = 1) |> 
  sf::st_transform(crs = 27700)

# Subset rnet_x and rnet_y based on the zone
rnet_x = rnet_x[sf::st_union(zone), , op = sf::st_intersects]
rnet_y = rnet_y[sf::st_union(zone), , op = sf::st_intersects]


rnet_x = stplanr::line_cast(rnet_x)

# Segment rnet_x into 10-meter segments
rnet_x_segments = stplanr::line_segment(rnet_x, segment_length = 10)

# Initialize 'segment_width' column with NA
rnet_x_segments$segment_width = NA_real_

# select random 10 rows in rnet_x_segments to do a quick test
# rnet_x_segments = rnet_x_segments[sample(nrow(rnet_x_segments), 10), ]
# Define constants
buffer_distance = 20  # Buffer distance in meters
max_angle_diff = 30   # Maximum angle difference in degrees
crs_proj = 27700       # Coordinate Reference System

# Define a processing function
process_segment = function(current_segment, rnet_y, buffer_distance, max_angle_diff, crs_proj) {
  
  # Create buffer
  current_buffer = stplanr::geo_buffer(
    current_segment, 
    dist = buffer_distance, 
    nQuadSegs = 2, 
    endCapStyle = "FLAT", 
    crs = crs_proj
  )
  
  # Clip rnet_y by buffer
  rnet_y_clip = st_intersection(current_buffer, rnet_y)

  # Return NA if no intersection
  if (nrow(rnet_y_clip) == 0) {
    return(NA_real_)
  }
  
  # Calculate angles
  angle_x = stplanr::line_bearing(current_segment, bidirectional = TRUE)
  angle_y = stplanr::line_bearing(rnet_y_clip, bidirectional = TRUE)
  
  # Calculate absolute angle differences
  angle_diff = abs(angle_y - angle_x)
  
  # Adjust angle differences to be within 0-180 degrees
  angle_diff = ifelse(angle_diff > 180, 360 - angle_diff, angle_diff)
  
  # Filter based on angle difference
  rnet_y_clip_filtered = rnet_y_clip %>%
    mutate(angle_diff = angle_diff) %>%
    filter(angle_diff <= max_angle_diff)

  # Return NA if no segments pass the filter
  if (nrow(rnet_y_clip_filtered) == 0) {
    return(NA_real_)
  }
  
  # Calculate length of each clipped y segment
  rnet_y_clip_filtered = rnet_y_clip_filtered %>%
    mutate(length_m = as.numeric(st_length(geometry)),
           length_times_width = length_m * averageWidth)
  
  # Compute total length of y segments within the buffer
  total_length_y = sum(rnet_y_clip_filtered$length_times_width, na.rm = TRUE)
  
  # Calculate length of the current x segment
  length_x = as.numeric(st_length(current_segment), na.rm = TRUE)
  
  # Avoid division by zero
  if (length_x > 0) {
    # Calculate averageWidth for the current segment
    segment_width = total_length_y / length_x
  } else {
    segment_width = NA_real_
    warning("Segment has zero length. segment_width set to NA.")
  }
  
  # Return the calculated segment_width
  return(segment_width)
}


rnet_x_segments$segment_width = map_dbl(
  1:nrow(rnet_x_segments),
  ~ process_segment(
      current_segment = rnet_x_segments[., ],
      rnet_y = rnet_y,
      buffer_distance = buffer_distance,
      max_angle_diff = max_angle_diff,
      crs_proj = crs_proj
    )
)


rnet_x_segments$segment_width[is.na(rnet_x_segments$segment_width)] = 0

mapview(rnet_x_segments, zcol = "segment_width") + mapview(rnet_y, color = "red")
```